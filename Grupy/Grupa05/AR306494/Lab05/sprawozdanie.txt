Sprawozdanie zajęcia 15.04.2021

Temat: Jenkins jako CI/CD driver - w kontenerze.


0. Zapoznałam się z diagramem omawianym na zajęciach.

1. Zapoznałam się z oprogramowaniem Jenkins.

2. Stworzyłam kontener dockerowy z Jenkinsem posługując się instrukcją https://www.jenkins.io/doc/book/installing/docker/

sudo docker network create jenkins

sudo docker run --name jenkins-docker --rm --detach \
  --privileged --network jenkins --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 2376:2376 docker:dind --storage-driver overlay2
  
Stworzyłam plik Dockerfile z zawartością:

FROM jenkins/jenkins:2.277.2-lts-jdk11
USER root
RUN apt-get update && apt-get install -y apt-transport-https \
       ca-certificates curl gnupg2 \
       software-properties-common
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
RUN apt-key fingerprint 0EBFCD88
RUN add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/debian \
       $(lsb_release -cs) stable"
RUN apt-get update && apt-get install -y docker-ce-cli
RUN jenkins-plugin-cli --plugins "blueocean:1.24.5 docker-workflow:1.26"

Zbudowałam obraz:
docker build -t myjenkins-blueocean:1.1 .

Uruchomiłam obraz jak kontener Dockerowy:
sudo docker run --name jenkins-blueocean --rm --detach \
  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \
  --publish 8080:8080 --publish 50000:50000 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  myjenkins-blueocean:1.1

3. Następnie wrzuciłam obraz swojego Jenkinsa na DockerHub'a:

sudo docker tag 6d26c0bcba07 aleksandra1819/lab05-devops
sudo docker push aleksandra1819/lab05-devops

4. Z poziomu Jenkinsa uruchomionego w kontenerze uruchomiłam docker-compose stworzony w ramach Lab04:
- zakładam, że Jenkins jest uruchomiony w kontenerze,
- zakładam, że po Lab04 plik docker-compose.yaml jest w naszym repozytorium,
- zakładam, że z poziomu Jenkinsa ściągamy repo gdzie jest nasz plik docker-compose.yaml,
- zakładam, że Jenkins uruchamia plik docker-compose.yaml tworząc środowisko z Lab04,
- uruchomienie docker-compose wymaga.yaml oprogramowania Docker,
- kroki w Jenkinsie zakończyły się sukcesem.
