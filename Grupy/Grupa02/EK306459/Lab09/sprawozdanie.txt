1. Web-hook
Prawidłowe działanie web-hooka wymaga połączenia lokalnie działającego Jenkinsa
z internetem. Do tego celu został użyty ngrok, który udostępnia adres na localhost
pod tymczasowym adresem. Ten adres został podany do web-hooka na witrynie Github
w ustawieniach repozytorium. W projekcie w Jenkinsie zostało ustawione automatyczne
wywoływanie buildów w przypadku pusha.

2. Udokumentowanie działania web-hooka
Do Jenkinsfile zostało dodane echo 'automation testing' i zatrzymanie Pipeline zaraz po nim.
Wszystkie screenshoty dokumentujące automatyczne działanie Pipeline są wykonane
zaraz po sobie i z uwzględnieniem daty i godziny w prawym górnym rogu.
(scr 2.1 - 2.4)

3. Stage Deploy
Stage Deploy tworzy nowy obraz i kontener na podstawie przetestowanej wersji aplikacji.
Dodatkowo przygotowuje obraz do wypchnięcia na DockerHUB. W ramach tego punktu
powstał nowy folder wewnątrz folderu Docker oraz zostały dodane nowe linijki do
docker-compose.
(scr 3.1 - 3.2)

4. Stage Deploy cd
Deploy tworzy kontener na podstawie obrazu lab05_build, który jest budowany i testowany
w poprzednich etapach Pipeline. Obecność zmiennej deploySuccess zapewnia, że użytkownik
Pipeline dowie się w finalnych emailu, czy etap Deploy powiódł się, nie powiódł się,
czy też w ogóle nie doszedł do skutku.

5. Udokumentowanie funkcjonalności
5.1 obecność Jenkinsfile w repo z aplikacją (scr 5.1)
5.2 automatyczne działanie (scr 2.1 - 2.4)
5.3 poprawność etapów 
(scr 5.3.1 - przypadek z zatrzymaniem Pipeline na początku etapu Build;
 scr 5.3.2 - przypadek zatrzymania Pipeline w etapie Test;
 scr 5.3.3 - udany Pipeline)
5.4 powiadomienia o rezultatach (scr 5.3.1 - 5.3.3)
