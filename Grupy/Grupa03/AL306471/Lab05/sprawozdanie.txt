1.
Zapoznałem się z oprogramowaniem Jenkins

2.
Stworzyłem kontener do obsługi Jenkinsa posługując się instrukcjami zawartymi na stronie oprogramowania.

docker network create jenkins <- utworzenie połączenia

docker run \
  --name jenkins-docker \
  --rm \
  --detach \
  --privileged \
  --network jenkins \
  --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 2376:2376 \
  docker:dind \
  --storage-driver overlay2

Utworzyłem Dockerfile-jenkins

FROM jenkins/jenkins:2.277.2-lts-jdk11
USER root
RUN apt-get update && apt-get install -y apt-transport-https \
       ca-certificates curl gnupg2 \
       software-properties-common
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
RUN apt-key fingerprint 0EBFCD88
RUN add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/debian \
       $(lsb_release -cs) stable"
RUN apt-get update && apt-get install -y docker-ce-cli
USER jenkins
RUN jenkins-plugin-cli --plugins "blueocean:1.24.6 docker-workflow:1.26"


Zbudowałem obraz za pomocą komendy docker build -t myjenkins-blueocean:1.1 . -f Dockerfile-jenkins

Uruchomiłem utworzony obraz

docker run \
  --name jenkins-blueocean \
  --rm \
  --detach \
  --network jenkins \
  --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client \
  --env DOCKER_TLS_VERIFY=1 \
  --publish 8080:8080 \
  --publish 50000:50000 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  myjenkins-blueocean:1.1 

3.
Wrzuciłem obraz Jenkinsa na DockerHub'a

docker tag 38148c4fd00 adrlit/lab05 <- ustawenie tagu
docker push adrlit/lab05 <- push obrazu na DockerHub'a

4.
Z poziomu Jenkinsa uruchomiłem kontener, który odpowiadał za uruchomienie docker-compose utworzonego na poprzednich zajęciach.
